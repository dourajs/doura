"use strict";(self.webpackChunkdoura_docs=self.webpackChunkdoura_docs||[]).push([[511],{4852:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(9231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||c;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,a=new Array(c);a[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var s=2;s<c;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2125:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return s}});var o=n(9675),r=(n(9231),n(4852));const c={id:"store",title:"Store"},a=void 0,i={unversionedId:"core-concepts/store",id:"core-concepts/store",title:"Store",description:"A model is only a definination of your data & loic. It's need to be init and accessed by a store. We call store a model manager internally.",source:"@site/docs/core-concepts/store.md",sourceDirName:"core-concepts",slug:"/core-concepts/store",permalink:"/doura/zh-CN/docs/core-concepts/store",draft:!1,editUrl:"https://github.com/dourajs/doura/tree/main/docs/core-concepts/store.md",tags:[],version:"current",frontMatter:{id:"store",title:"Store"},sidebar:"docs",previous:{title:"Playground",permalink:"/doura/zh-CN/docs/playground"},next:{title:"State",permalink:"/doura/zh-CN/docs/core-concepts/state"}},l={},s=[{value:"Setting initial state",id:"setting-initial-state",level:2},{value:"Multil Store",id:"multil-store",level:2}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A model is only a definination of your data & loic. It's need to be init and accessed by a store. We call store a model manager internally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export const counterModel = defineModel({\n  name: 'counter',\n  state: {\n    count: 0,\n  },\n  actions: {\n    // since we rely on `this`, we cannot use an arrow function\n    increment() {\n      this.count++\n    },\n    randomizeCounter() {\n      this.count = Math.round(100 * Math.random())\n    },\n  },\n})\n\nconst store = doure()\n\nconst modelInstance = store.getModel(counterModel)\n\n// call the action as a method of the model instance\nmodelInstance.increment()\n\n// read the state as a props of the model instance\nconsole.log(modelInstance.count)\n")),(0,r.kt)("h2",{id:"setting-initial-state"},"Setting initial state"),(0,r.kt)("p",null,"Initial state can be setted by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"initialState")," options to ",(0,r.kt)("inlineCode",{parentName:"p"},"doura()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const store = doure({\n  initialState: {\n    // using the name of a model as key\n    counter: {\n      count: 100,\n    },\n  },\n})\n\nconst modelInstance = store.getModel(counterModel)\n\nconsole.log(modelInstance.count) // 100\n")),(0,r.kt)("h2",{id:"multil-store"},"Multil Store"),(0,r.kt)("p",null,"A model can be used in multi store, they will have independent state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const storeA = doure()\nconst storeB = doure()\n\nconst counterA = storeA.getModel(counterModel)\nconst counterB = storeB.getModel(counterModel)\n\nconsole.log(counterA.count) // 0 \nconsole.log(counterB.count) // 0\n\ncounterA.increment()\n\nconsole.log(counterA.count) // 1 \nconsole.log(counterB.count) // 0\n")))}d.isMDXComponent=!0}}]);