"use strict";(self.webpackChunkdoura_docs=self.webpackChunkdoura_docs||[]).push([[960],{4852:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>v});var a=t(9231);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),c=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,v=u["".concat(d,".").concat(m)]||u[m]||p[m]||r;return t?a.createElement(v,l(l({ref:n},s),{},{components:t})):a.createElement(v,l({ref:n},s))}));function v(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2741:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(8041),o=(t(9231),t(4852));const r={id:"doura",title:"Doura"},l=void 0,i={unversionedId:"api/core/doura",id:"api/core/doura",title:"Doura",description:"State",source:"@site/docs/api/core/doura.md",sourceDirName:"api/core",slug:"/api/core/doura",permalink:"/doura/zh-CN/docs/api/core/doura",draft:!1,editUrl:"https://github.com/dourajs/doura/tree/main/docs/api/core/doura.md",tags:[],version:"current",frontMatter:{id:"doura",title:"Doura"},sidebar:"api",next:{title:"React Doura",permalink:"/doura/zh-CN/docs/api/core/react-doura"}},d={},c=[{value:"State",id:"state",level:2},{value:"Types",id:"types",level:3},{value:"Action",id:"action",level:2},{value:"Types",id:"types-1",level:3},{value:"Example",id:"example",level:3},{value:"View",id:"view",level:2},{value:"Types",id:"types-2",level:3},{value:"Example",id:"example-1",level:3},{value:"<code>defineModel</code>",id:"definemodel",level:2},{value:"Types",id:"types-3",level:3},{value:"<code>defineModel</code> By Object",id:"definemodel-by-object",level:3},{value:"<code>defineModel</code> By Function",id:"definemodel-by-function",level:3},{value:"<code>doura</code>",id:"doura",level:2},{value:"Types",id:"types-4",level:3},{value:"Example",id:"example-2",level:3},{value:"<code>ModelInstance</code>",id:"modelinstance",level:2},{value:"Example",id:"example-3",level:3}],s={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"state"},"State"),(0,o.kt)("h3",{id:"types"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type StateObject = {\n  [x: string]: any\n}\n")),(0,o.kt)("h2",{id:"action"},"Action"),(0,o.kt)("h3",{id:"types-1"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type ActionOptions = Record<string, Function>\n")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const count = defineModel({\n  state: { value: 0 },\n  actions: {\n    add(p: number) {\n      this.value += p\n    },\n    nested() {\n      this.add(1)\n    },\n    async asyncAction(): Promise<void> {\n      this.value += 1\n      await timeout(1000)\n      this.value += 1\n    },\n    changeStateBy$state(n: number) {\n      this.$state.value += n\n    },\n    changeStateByReturnValue() {\n      return { value: 2 }\n    },\n  },\n")),(0,o.kt)("h2",{id:"view"},"View"),(0,o.kt)("h3",{id:"types-2"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type ViewOptions<State = any> = Record<\n  string,\n  ((s: State) => any) | (() => any)\n>\n")),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const count = defineModel({\n  state: {\n    count: 1,\n  },\n  views: {\n    double(s) {\n      return s.count * 2\n    },\n    doubleByThis() {\n      return this.count * 2\n    },\n    nested() {\n      this.double\n    },\n  },\n})\n")),(0,o.kt)("h2",{id:"definemodel"},(0,o.kt)("inlineCode",{parentName:"h2"},"defineModel")),(0,o.kt)("p",null,"There is two ways define a model, object or function."),(0,o.kt)("h3",{id:"types-3"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export type DefineModel<\n  S extends State,\n  A extends ActionOptions,\n  V extends ViewOptions,\n  P extends Params\n> = ModelOptions<S, A, V, P> & {}\n")),(0,o.kt)("h3",{id:"definemodel-by-object"},(0,o.kt)("inlineCode",{parentName:"h3"},"defineModel")," By Object"),(0,o.kt)("p",null,"The basic way to define model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const countModel = defineModel({\n  state: { count: 1 },\n  actions: {\n    add(p: number) {\n      this.count += p\n    },\n  },\n  views: {\n    double() {\n      return this.count * 2\n    },\n  },\n})\n")),(0,o.kt)("h3",{id:"definemodel-by-function"},(0,o.kt)("inlineCode",{parentName:"h3"},"defineModel")," By Function"),(0,o.kt)("p",null,"Defined model, and defined it's depends."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const countModel = defineModel({\n  state: { count: 1 },\n  actions: {\n    add(p: number) {\n      this.count += p\n    },\n  },\n  views: {\n    double() {\n      return this.count * 2\n    },\n  },\n})\n\nconst model = defineModel(({ use }) => {\n  const count = use('count', countModel)\n  return {\n    state: { value: 0 },\n    actions: {\n      add(p: number) {\n        this.value += p\n      },\n    },\n    views: {\n      all() {\n        return {\n          value: this.value,\n          depDouble: count.double,\n        }\n      },\n    },\n  }\n})\n")),(0,o.kt)("h2",{id:"doura"},(0,o.kt)("inlineCode",{parentName:"h2"},"doura")),(0,o.kt)("p",null,"For create a modelManager."),(0,o.kt)("h3",{id:"types-4"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function doura({ initialState, plugins = [] }): Doura\n")),(0,o.kt)("h3",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const store = doure({\n  initialState: {\n    counter: {\n      count: 100,\n    },\n  },\n})\n\nconst modelInstance = store.getModel('counter', counterModel)\n\nconsole.log(modelInstance.count) // 100\n")),(0,o.kt)("h2",{id:"modelinstance"},(0,o.kt)("inlineCode",{parentName:"h2"},"ModelInstance")),(0,o.kt)("p",null,"Get model state, call actions and views."),(0,o.kt)("h3",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const store = doura()\nconst model = defineModel({\n  state: { value: 0 },\n  actions: {\n    actionOne() {\n      // ...change state\n    },\n  },\n  views: {\n    viewOne() {},\n  },\n})\n\nconst modelInstance = store.getModel('test', model)\nmodelInstance.$state // { value: 0 }\nmodelInstance.actionOne() // undefined\nmodelInstance.viewOne // undefined\n")))}u.isMDXComponent=!0}}]);