"use strict";(self.webpackChunkdoura_docs=self.webpackChunkdoura_docs||[]).push([[265],{4852:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(m,c(c({ref:t},u),{},{components:n})):r.createElement(m,c({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},655:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return l}});var r=n(9675),o=(n(9231),n(4852));const a={id:"state",title:"State"},c=void 0,i={unversionedId:"core-concepts/state",id:"core-concepts/state",title:"State",description:"The state is, most of the time, the central part of your model. People often start by defining the state that represents their app.",source:"@site/docs/core-concepts/state.md",sourceDirName:"core-concepts",slug:"/core-concepts/state",permalink:"/doura/docs/core-concepts/state",draft:!1,editUrl:"https://github.com/dourajs/doura/tree/main/docs/core-concepts/state.md",tags:[],version:"current",frontMatter:{id:"state",title:"State"},sidebar:"docs",previous:{title:"Store",permalink:"/doura/docs/core-concepts/store"},next:{title:"Actions",permalink:"/doura/docs/core-concepts/actions"}},s={},l=[{value:"Accessing the <code>state</code>",id:"accessing-the-state",level:2},{value:"Replacing the <code>state</code>",id:"replacing-the-state",level:2},{value:"Subscribing to the state",id:"subscribing-to-the-state",level:2}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The state is, most of the time, the central part of your model. People often start by defining the state that represents their app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { defineModel } from 'doura'\n\nexport const countModel = defineModel({\n  // arrow function recommended for full type inference\n  state: {\n    // all these properties will have their type inferred automatically\n    count: 0,\n    name: 'test',\n    max: 100,\n  },\n})\n")),(0,o.kt)("h2",{id:"accessing-the-state"},"Accessing the ",(0,o.kt)("inlineCode",{parentName:"h2"},"state")),(0,o.kt)("p",null,"By default, you can directly read and write to the state by accessing it through the ",(0,o.kt)("inlineCode",{parentName:"p"},"model")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const counter = store.getModel('counter', countModel)\n\ncounter.count++\n")),(0,o.kt)("p",null,"Note you cannot add a new state property ",(0,o.kt)("strong",{parentName:"p"},"if you don't define it in ",(0,o.kt)("inlineCode",{parentName:"strong"},"state")),", it must contain the initial state. e.g.: we can't do ",(0,o.kt)("inlineCode",{parentName:"p"},"counter.secondCount = 2")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"secondCount")," is not defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),"."),(0,o.kt)("h2",{id:"replacing-the-state"},"Replacing the ",(0,o.kt)("inlineCode",{parentName:"h2"},"state")),(0,o.kt)("p",null,"You ",(0,o.kt)("strong",{parentName:"p"},"cann replace")," the state of a model by assgining the new state to ",(0,o.kt)("inlineCode",{parentName:"p"},"$state"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const model = store.getModel('counter', countModel)\n\nmodel.$state = { count: 24 }\n")),(0,o.kt)("h2",{id:"subscribing-to-the-state"},"Subscribing to the state"),(0,o.kt)("p",null,"Documentation coming soon..."))}p.isMDXComponent=!0}}]);