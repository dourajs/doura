"use strict";(self.webpackChunkdoura_docs=self.webpackChunkdoura_docs||[]).push([[462],{4852:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=u(n),d=o,m=f["".concat(c,".").concat(d)]||f[d]||l[d]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5827:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return l},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var r=n(9675),o=(n(9231),n(4852));const a={id:"typescript",title:"Typescript"},i=void 0,s={unversionedId:"guides/typescript",id:"guides/typescript",title:"Typescript",description:"You don't need to do much in order to make your state compatible with TS",source:"@site/docs/guides/typescript.md",sourceDirName:"guides",slug:"/guides/typescript",permalink:"/doura/docs/guides/typescript",draft:!1,editUrl:"https://github.com/dourajs/doura/tree/main/docs/guides/typescript.md",tags:[],version:"current",frontMatter:{id:"typescript",title:"Typescript"}},c={},u=[],p={toc:u};function l(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You don't need to do much in order to make your state compatible with TS: make sure ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#strict"},(0,o.kt)("inlineCode",{parentName:"a"},"strict")),", or at the very least, ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#noImplicitThis"},(0,o.kt)("inlineCode",{parentName:"a"},"noImplicitThis")),", are enabled and Doura will infer the type of your state automatically! However, there are a few cases where you should give it a hand with some casting:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const useUserStore = defineModel({\n  state: {\n    // for initially empty lists\n    userList: [] as UserInfo[],\n    // for data that is not yet loaded\n    user: null as UserInfo | null,\n  },\n})\n\ninterface UserInfo {\n  name: string\n  age: number\n}\n")),(0,o.kt)("p",null,"If you prefer, you can define the state with an interface and type the ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface State {\n  userList: UserInfo[]\n  user: UserInfo | null\n}\n\nexport const useUserStore = defineModel({\n  state: {\n    userList: [],\n    user: null,\n  } as State,\n})\n\ninterface UserInfo {\n  name: string\n  age: number\n}\n")))}l.isMDXComponent=!0}}]);