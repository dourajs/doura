"use strict";(self.webpackChunkdoura_docs=self.webpackChunkdoura_docs||[]).push([[248],{4852:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>v});var a=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},i=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),c=u(n),m=o,v=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return n?a.createElement(v,l(l({ref:t},i),{},{components:n})):a.createElement(v,l({ref:t},i))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[c]="string"==typeof e?e:o,l[1]=d;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>u});var a=n(8041),o=(n(9231),n(4852));const r={id:"react-doura",title:"React Doura"},l=void 0,d={unversionedId:"api/core/react-doura",id:"api/core/react-doura",title:"React Doura",description:"useModel",source:"@site/docs/api/core/react-doura.md",sourceDirName:"api/core",slug:"/api/core/react-doura",permalink:"/doura/docs/api/core/react-doura",draft:!1,editUrl:"https://github.com/dourajs/doura/tree/main/docs/api/core/react-doura.md",tags:[],version:"current",frontMatter:{id:"react-doura",title:"React Doura"},sidebar:"api",previous:{title:"Doura",permalink:"/doura/docs/api/core/doura"},next:{title:"Plugins",permalink:"/doura/docs/api/plugins/"}},s={},u=[{value:"useModel",id:"usemodel",level:2},{value:"Types",id:"types",level:3},{value:"useModel Without Name",id:"usemodel-without-name",level:2},{value:"Types",id:"types-1",level:3},{value:"Example",id:"example",level:3},{value:"Selector Types",id:"selector-types",level:3},{value:"Example",id:"example-1",level:4},{value:"DouraRoot",id:"douraroot",level:2},{value:"Types",id:"types-2",level:3},{value:"Example",id:"example-2",level:3},{value:"useModel With Name",id:"usemodel-with-name",level:2},{value:"Types",id:"types-3",level:3},{value:"Example",id:"example-3",level:3},{value:"useStaticModel",id:"usestaticmodel",level:2},{value:"Types",id:"types-4",level:3},{value:"Example",id:"example-4",level:3},{value:"createContainer",id:"createcontainer",level:2},{value:"Types",id:"types-5",level:3},{value:"Example",id:"example-5",level:3}],i={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"usemodel"},"useModel"),(0,o.kt)("h3",{id:"types"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare interface UseModel extends UseAnonymousModel, UseNamedModel {}\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"With the param ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," or not, ",(0,o.kt)("inlineCode",{parentName:"p"},"useModel")," has very different behavior.")),(0,o.kt)("h2",{id:"usemodel-without-name"},"useModel Without Name"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useModel")," can replace ",(0,o.kt)("inlineCode",{parentName:"p"},"useState"),", and enjoy doura features."),(0,o.kt)("h3",{id:"types-1"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare interface UseAnonymousModel {\n  <IModel extends AnyModel>(model: IModel): ModelAPI<IModel>\n  <IModel extends AnyModel, S extends Selector<IModel>>(\n    model: IModel,\n    selectors: S,\n    depends?: any[]\n  ): ReturnType<S>\n}\n")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"Easy to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"useState"),", no need care about warp ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"useCallback"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const count = defineModel({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(payload: number = 1) {\n      this.value += payload\n    },\n  },\n})\nconst App = () => {\n  const counter = useModel(count)\n\n  return (\n    <>\n      <div id="value">{counter.value}</div>\n      <button id="button" type="button" onClick={() => counter.add()}>\n        add\n      </button>\n    </>\n  )\n}\n')),(0,o.kt)("p",null,"Use selector to pick exact what we want"),(0,o.kt)("h3",{id:"selector-types"},"Selector Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Selector<Model extends AnyModel, TReturn = any> = (\n  api: ModelAPI<Model>,\n  actions: ModelActions<Model>\n) => TReturn\n")),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Selector } from 'react-doura'\nconst countSelector: Selector<\n  typeof countModel,\n  { count: number; add: () => void }\n> = (s, actions) => {\n  return { count: s.count, add: actions.add }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ModelAPI\uff0c ModelActions } from 'doura'\nconst countSelector = (\n  s: ModelAPI<typeof countModel>,\n  actions: ModelActions<typeof countModel>\n) => {\n  return { count: s.count, add: actions.add }\n}\n")),(0,o.kt)("p",null,"when depends not changed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectors")," function will be old one, it works like ",(0,o.kt)("inlineCode",{parentName:"p"},"useCallback"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const countModel = defineModel({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(payload: number = 1) {\n      this.value += payload\n    },\n    async asyncAdd(n: number) {\n      await sleep(200)\n      this.add(n)\n    },\n  },\n  views: {\n    test() {\n      return this.value + 1\n    },\n  },\n})\n\nconst App = () => {\n  const counter = useModel(\n    countModel,\n    (state, actions) => {\n      return {\n        value: state.value,\n        test: state.test,\n        ...actions,\n      }\n    },\n    []\n  )\n\n  return (\n    <>\n      <div id="v">{counter.value}</div>\n      <div id="t">{counter.test}</div>\n      <button id="button" type="button" onClick={() => counter.add(2)}>\n        add\n      </button>\n    </>\n  )\n}\n')),(0,o.kt)("h2",{id:"douraroot"},"DouraRoot"),(0,o.kt)("p",null,"Provider context for ",(0,o.kt)("inlineCode",{parentName:"p"},"useModel")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useStaticModel"),"."),(0,o.kt)("h3",{id:"types-2"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare const DouraRoot: (\n  props: PropsWithChildren<{\n    store?: Doura\n  }>\n) => JSX.Element\n")),(0,o.kt)("h3",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<DouraRoot store={doura()}>\n  <App />\n</DouraRoot>\n")),(0,o.kt)("h2",{id:"usemodel-with-name"},"useModel With Name"),(0,o.kt)("p",null,"Get global state by anywhere."),(0,o.kt)("h3",{id:"types-3"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare interface UseNamedModel {\n  <IModel extends AnyModel>(name: string, model: IModel): ModelAPI<IModel>\n  <IModel extends AnyModel, S extends Selector<IModel>>(\n    name: string,\n    model: IModel,\n    selectors: S,\n    depends?: any[]\n  ): ReturnType<S>\n}\n")),(0,o.kt)("h3",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const App = () => {\n  const counter = useModel(\n    'count',\n    countModel,\n    (s, actions) => {\n      fn()\n      return { count: s.count, add: actions.add }\n    },\n    []\n  )\n\n  return (\n    <button id=\"count\" onClick={() => counter.add()}>\n      {counter.count}\n    </button>\n  )\n}\n")),(0,o.kt)("h2",{id:"usestaticmodel"},"useStaticModel"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"State change will not trigger render.")),(0,o.kt)("h3",{id:"types-4"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare interface UseStaticModel {\n  <IModel extends AnyModel>(name: string, model: IModel): ModelAPI<IModel>\n}\n")),(0,o.kt)("h3",{id:"example-4"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const model = defineModel({\n  state: { value: 1 },\n  views: {\n    test() {\n      return this.value * 2\n    },\n  },\n})\n\nconst App = () => {\n  const state = useStaticModel(\'test\', model)\n\n  return (\n    <>\n      <div id="v">{state.value}</div>\n      <div id="t">{state.test}</div>\n    </>\n  )\n}\n')),(0,o.kt)("h2",{id:"createcontainer"},"createContainer"),(0,o.kt)("p",null,"Create a group api for share states."),(0,o.kt)("h3",{id:"types-5"},"Types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"declare const createContainer: (options?: DouraOptions) => {\n  Provider: (\n    props: PropsWithChildren<{\n      store?: Doura\n    }>\n  ) => JSX.Element\n  useSharedModel: UseNamedModel\n  useStaticModel: UseStaticModel\n}\n")),(0,o.kt)("h3",{id:"example-5"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const {\n  Provider, // context as same as DouraRoot\n  useSharedModel, // as same as useModel and it first param must be `name`\n  useStaticModel, // as same as useStaticModel\n} = createContainer()\n")))}c.isMDXComponent=!0}}]);